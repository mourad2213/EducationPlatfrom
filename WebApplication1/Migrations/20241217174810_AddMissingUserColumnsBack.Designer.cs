// <auto-generated />
/*
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Models;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(MilestoneContext))]
    [Migration("20241217174810_AddMissingUserColumnsBack")]
    partial class AddMissingUserColumnsBack
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AchievementBadge", b =>
                {
                    b.Property<int>("AchievementId")
                        .HasColumnType("int")
                        .HasColumnName("Achievement_ID");

                    b.Property<int>("BadgeId")
                        .HasColumnType("int")
                        .HasColumnName("Badge_ID");

                    b.HasKey("AchievementId", "BadgeId")
                        .HasName("PK__Achievem__797062FB352A10FE");

                    b.HasIndex("BadgeId");

                    b.ToTable("AchievementBadges", (string)null);
                });

            modelBuilder.Entity("CoursesInstructor", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("Instructor_ID");

                    b.HasKey("CourseId", "InstructorId")
                        .HasName("PK__CoursesI__8A34BC5381155A32");

                    b.HasIndex("InstructorId");

                    b.ToTable("CoursesInstructor", (string)null);
                });

            modelBuilder.Entity("LearnerAchievement", b =>
                {
                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<int>("AchievementId")
                        .HasColumnType("int")
                        .HasColumnName("Achievement_ID");

                    b.HasKey("LearnerId", "AchievementId")
                        .HasName("PK__LearnerA__9F46573372849998");

                    b.HasIndex("AchievementId");

                    b.ToTable("LearnerAchievements", (string)null);
                });

            modelBuilder.Entity("LearnerBadge", b =>
                {
                    b.Property<int>("BadgeId")
                        .HasColumnType("int")
                        .HasColumnName("Badge_ID");

                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.HasKey("BadgeId", "LearnerId")
                        .HasName("PK__LearnerB__D0F8C47B121C63BB");

                    b.HasIndex("LearnerId");

                    b.ToTable("LearnerBadges", (string)null);
                });

            modelBuilder.Entity("LearnerCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.HasKey("CourseId", "LearnerId")
                        .HasName("PK__LearnerC__D43E2284F7B269A0");

                    b.HasIndex("LearnerId");

                    b.ToTable("LearnerCourses", (string)null);
                });

            modelBuilder.Entity("LearnerSurvey", b =>
                {
                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int")
                        .HasColumnName("Survey_ID");

                    b.HasKey("LearnerId", "SurveyId")
                        .HasName("PK__LearnerS__6B223884529ACB55");

                    b.HasIndex("SurveyId");

                    b.ToTable("LearnerSurveys", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ModulesLearningActivity", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("Module_ID");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int")
                        .HasColumnName("Activity_ID");

                    b.HasKey("ModuleId", "ActivityId")
                        .HasName("PK__ModulesL__5E7715922B9F7755");

                    b.HasIndex("ActivityId");

                    b.ToTable("ModulesLearningActivities", (string)null);
                });

            modelBuilder.Entity("PersonalizationProfilesLearningPath", b =>
                {
                    b.Property<int>("PathId")
                        .HasColumnType("int")
                        .HasColumnName("PathID");

                    b.Property<int>("PersonalizationProfileId")
                        .HasColumnType("int")
                        .HasColumnName("PersonalizationProfileID");

                    b.HasKey("PathId", "PersonalizationProfileId")
                        .HasName("PK__Personal__2A43BE03A9479754");

                    b.HasIndex("PersonalizationProfileId");

                    b.ToTable("PersonalizationProfilesLearningPaths", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Achievement", b =>
                {
                    b.Property<int>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Achievement_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievementId"));

                    b.Property<string>("AchievementDescription")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Achievement_Description");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.HasKey("AchievementId")
                        .HasName("PK__Achievem__2A420CCBE5ED821F");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("WebApplication1.Models.Assessment", b =>
                {
                    b.Property<int>("AssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Assessment_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssessmentId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("GradingCriteria")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Grading_Criteria");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("Instructor_ID");

                    b.Property<int?>("MaxScore")
                        .HasColumnType("int")
                        .HasColumnName("Max_Score");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("Module_ID");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("AssessmentId")
                        .HasName("PK__Assessme__6B3C1D928095953C");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("WebApplication1.Models.Badge", b =>
                {
                    b.Property<int>("BadgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Badge_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BadgeId"));

                    b.Property<int?>("BadgePoints")
                        .HasColumnType("int")
                        .HasColumnName("Badge_Points");

                    b.Property<string>("BadgeTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Badge_Title");

                    b.HasKey("BadgeId")
                        .HasName("PK__Badges__3326E30430BC55B3");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("WebApplication1.Models.CollaborativeQuest", b =>
                {
                    b.Property<int>("QuestId")
                        .HasColumnType("int")
                        .HasColumnName("Quest_ID");

                    b.Property<DateOnly?>("Deadline")
                        .HasColumnType("date");

                    b.Property<int?>("MaxParticipants")
                        .HasColumnType("int")
                        .HasColumnName("Max_Participants");

                    b.HasKey("QuestId")
                        .HasName("PK__Collabor__6D9E739B6FD09241");

                    b.ToTable("CollaborativeQuest", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.ContentLibrary", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Content_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentId"));

                    b.Property<string>("ContentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Content_Type");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("Module_ID");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ContentId")
                        .HasName("PK__ContentL__4F5E1825D762E643");

                    b.HasIndex("ModuleId");

                    b.ToTable("ContentLibrary", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int?>("CourseCreditHours")
                        .HasColumnType("int")
                        .HasColumnName("Course_Credit_Hours");

                    b.Property<string>("CourseDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Course_Description");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Course_Title");

                    b.Property<string>("DifficultyLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Difficulty_Level");

                    b.HasKey("CourseId")
                        .HasName("PK__Courses__37E005FB8902CD41");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("WebApplication1.Models.CourseEnrollment", b =>
                {
                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.Property<DateOnly?>("CompletionDate")
                        .HasColumnType("date")
                        .HasColumnName("Completion_Date");

                    b.Property<DateOnly?>("EnrollmentDate")
                        .HasColumnType("date")
                        .HasColumnName("Enrollment_Date");

                    b.Property<string>("EnrollmentStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Enrollment_Status");

                    b.HasKey("LearnerId", "CourseId")
                        .HasName("PK__CourseEn__9E9C77A0138D9DDA");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseEnrollment", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.CourseLearningObjective", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.Property<string>("LearningObjective")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CourseId", "LearningObjective")
                        .HasName("PK__CourseLe__47FAD9E8B6A45399");

                    b.ToTable("CourseLearningObjectives");
                });

            modelBuilder.Entity("WebApplication1.Models.CoursePrerequisite", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.Property<string>("Prerequisite")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("CourseId")
                        .HasName("PK__CoursePr__37E005FBEF28DC3C");

                    b.ToTable("CoursePrerequisites");
                });

            modelBuilder.Entity("WebApplication1.Models.DiscussionForum", b =>
                {
                    b.Property<int>("ForumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Forum_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ForumId"));

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("LastTimeActive")
                        .HasColumnType("datetime")
                        .HasColumnName("Last_Time_Active");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("Module_ID");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ForumId")
                        .HasName("PK__Discussi__E49DF9138BA8B854");

                    b.HasIndex("ModuleId");

                    b.ToTable("DiscussionForums");
                });

            modelBuilder.Entity("WebApplication1.Models.DiscussionForumsLearner", b =>
                {
                    b.Property<int?>("ForumId")
                        .HasColumnType("int")
                        .HasColumnName("Forum_ID");

                    b.Property<int?>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.HasIndex("ForumId");

                    b.HasIndex("LearnerId");

                    b.ToTable("DiscussionForumsLearner", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.EmotionalFeedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Feedback_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int")
                        .HasColumnName("Activity_ID");

                    b.Property<string>("EmotionalState")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Emotional_State");

                    b.Property<byte[]>("FeedbackTime")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Feedback_Time");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("Instructor_ID");

                    b.Property<int?>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Emotiona__CD3992F8B5D6F044");

                    b.HasIndex("ActivityId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LearnerId");

                    b.ToTable("EmotionalFeedback", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Instructor_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructorId"));

                    b.Property<string>("ExpertiseAreas")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Expertise_Areas");

                    b.Property<string>("InstructorName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Instructor_Name");

                    b.Property<string>("Qualifications")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("InstructorId")
                        .HasName("PK__Instruct__DD4B9A8AFFF401BE");

                    b.ToTable("Instructor", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.InstructorEmail", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("Instructor_ID");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("InstructorId", "Email")
                        .HasName("PK__Instruct__97D68AD9EB79A6D2");

                    b.ToTable("InstructorEmail", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.InteractionLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Log_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<int?>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<int?>("LogDuration")
                        .HasColumnType("int")
                        .HasColumnName("Log_Duration");

                    b.Property<string>("LogType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Log_Type");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("Time_Stamp");

                    b.HasKey("LogId")
                        .HasName("PK__Interact__2D26E7AE7788A041");

                    b.HasIndex("LearnerId");

                    b.ToTable("InteractionLogs");
                });

            modelBuilder.Entity("WebApplication1.Models.Leaderboard", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.Property<int>("BoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Board_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BoardId"));

                    b.Property<int?>("TotalPoints")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "BoardId")
                        .HasName("PK__Leaderbo__36217AA16016EB39");

                    b.ToTable("Leaderboards");
                });

            modelBuilder.Entity("WebApplication1.Models.Learner", b =>
                {
                    b.Property<int>("LearnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LearnerId"));

                    b.Property<int?>("BoardId")
                        .HasColumnType("int")
                        .HasColumnName("Board_ID");

                    b.Property<string>("CountryOfOrigin")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Country_of_Origin");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.Property<string>("ExperienceLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Experience_Level");

                    b.Property<int?>("LearnerAge")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasColumnName("Learner_Age")
                        .HasComputedColumnSql("(datepart(year,getdate())-datepart(year,[Learner_Birthday_Date]))", false);

                    b.Property<DateOnly>("LearnerBirthdayDate")
                        .HasColumnType("date")
                        .HasColumnName("Learner_Birthday_Date");

                    b.Property<string>("LearnerGender")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Learner_Gender");

                    b.Property<string>("LearnerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Learner_Name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LearnerId")
                        .HasName("PK__Learner__3DE277FF83027DBD");

                    b.HasIndex("UserId");

                    b.HasIndex("CourseId", "BoardId");

                    b.ToTable("Learner", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.LearnerAssessment", b =>
                {
                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int")
                        .HasColumnName("Assessment_ID");

                    b.Property<int?>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.HasKey("LearnerId", "AssessmentId")
                        .HasName("PK__LearnerA__0B51B62682D24FB9");

                    b.HasIndex("AssessmentId");

                    b.ToTable("LearnerAssessments");
                });

            modelBuilder.Entity("WebApplication1.Models.LearnerDiscussionForum", b =>
                {
                    b.Property<int>("ForumId")
                        .HasColumnType("int")
                        .HasColumnName("Forum_ID");

                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<string>("Post")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ForumId", "LearnerId", "Post")
                        .HasName("PK__LearnerD__A8E701A6D0C1FC84");

                    b.HasIndex("LearnerId");

                    b.ToTable("LearnerDiscussionForums");
                });

            modelBuilder.Entity("WebApplication1.Models.LearnerNotification", b =>
                {
                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int")
                        .HasColumnName("Notification_ID");

                    b.Property<bool?>("ReadStatus")
                        .HasColumnType("bit");

                    b.HasKey("LearnerId", "NotificationId")
                        .HasName("PK__LearnerN__752361F4410735BE");

                    b.HasIndex("NotificationId");

                    b.ToTable("LearnerNotifications");
                });

            modelBuilder.Entity("WebApplication1.Models.LearnerQuest", b =>
                {
                    b.Property<int>("QuestId")
                        .HasColumnType("int")
                        .HasColumnName("Quest_ID");

                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<string>("CompletionStatus")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("Completion_Status");

                    b.HasKey("QuestId", "LearnerId")
                        .HasName("PK__LearnerQ__8E4054E450C18CF5");

                    b.HasIndex("LearnerId");

                    b.ToTable("LearnerQuests");
                });

            modelBuilder.Entity("WebApplication1.Models.LearnerSkill", b =>
                {
                    b.Property<int?>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<string>("LearnerSkills")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Learner_Skills");

                    b.HasIndex("LearnerId");

                    b.ToTable("LearnerSkills");
                });

            modelBuilder.Entity("WebApplication1.Models.LearningActivity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Activity_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"));

                    b.Property<string>("ActivityType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Activity_Type");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.Property<string>("DetailedInstructions")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Detailed_Instructions");

                    b.Property<int?>("LogId")
                        .HasColumnType("int")
                        .HasColumnName("Log_ID");

                    b.Property<int?>("MaxPoints")
                        .HasColumnType("int")
                        .HasColumnName("Max_Points");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("Module_ID");

                    b.HasKey("ActivityId")
                        .HasName("PK__Learning__393F5BA52270CBF1");

                    b.HasIndex("CourseId");

                    b.HasIndex("LogId");

                    b.HasIndex("ModuleId");

                    b.ToTable("LearningActivities");
                });

            modelBuilder.Entity("WebApplication1.Models.LearningGoal", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Goal_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoalId"));

                    b.Property<DateOnly?>("Deadline")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("GoalId")
                        .HasName("PK__Learning__09AD12A277DD4F11");

                    b.HasIndex("LearnerId");

                    b.ToTable("LearningGoals");
                });

            modelBuilder.Entity("WebApplication1.Models.LearningPath", b =>
                {
                    b.Property<int>("PathId")
                        .HasColumnType("int")
                        .HasColumnName("Path_ID");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("Instructor_ID");

                    b.Property<int?>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<string>("LearnerStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Learner_Status");

                    b.Property<string>("PathDescription")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Path_Description");

                    b.Property<string>("Rules")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PathId")
                        .HasName("PK__Learning__12D3DFFB93EE5982");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LearnerId");

                    b.ToTable("LearningPath", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Module_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"));

                    b.Property<string>("ContentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Content_Type");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.Property<string>("LevelOfDifficulty")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Level_of_Difficulty");

                    b.HasKey("ModuleId")
                        .HasName("PK__Modules__1DE4E028290D4F85");

                    b.HasIndex("CourseId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("WebApplication1.Models.ModulesLink", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("Module_ID");

                    b.Property<string>("Link")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ModuleId", "Link")
                        .HasName("PK__ModulesL__86669DEEE65F3A99");

                    b.ToTable("ModulesLinks");
                });

            modelBuilder.Entity("WebApplication1.Models.ModulesTargetTrait", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("Module_ID");

                    b.Property<string>("TargetTrait")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Target_Trait");

                    b.HasKey("ModuleId", "TargetTrait")
                        .HasName("PK__ModulesT__1A139C72C367DB66");

                    b.ToTable("ModulesTargetTraits");
                });

            modelBuilder.Entity("WebApplication1.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Notification_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int?>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<string>("MessageBody")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Message_Body");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime");

                    b.Property<string>("UrgencyLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Urgency_Level");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__8C1160B583D31540");

                    b.HasIndex("LearnerId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("WebApplication1.Models.PersonalizationProfile", b =>
                {
                    b.Property<int>("PersonalizationProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonalizationProfileID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonalizationProfileId"));

                    b.Property<string>("CurrentEmotionalState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Current_Emotional_State");

                    b.Property<int?>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<int?>("PathId")
                        .HasColumnType("int")
                        .HasColumnName("PathID");

                    b.Property<string>("PersonalityType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Personality_Type");

                    b.Property<string>("PreferedContentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Prefered_content_type");

                    b.HasKey("PersonalizationProfileId")
                        .HasName("PK__Personal__724623AFA4037613");

                    b.HasIndex("LearnerId");

                    b.ToTable("PersonalizationProfiles");
                });

            modelBuilder.Entity("WebApplication1.Models.Quest", b =>
                {
                    b.Property<int>("QuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Quest_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestId"));

                    b.Property<string>("Criteria")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DifficultyLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Difficulty_Level");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("QuestId")
                        .HasName("PK__Quests__6D9E739BABC867A3");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("WebApplication1.Models.Reward", b =>
                {
                    b.Property<int>("RewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Reward_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RewardId"));

                    b.Property<int?>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<int?>("QuestId")
                        .HasColumnType("int")
                        .HasColumnName("Quest_ID");

                    b.Property<int?>("RewardValue")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RewardId")
                        .HasName("PK__Rewards__69FE4BD444A95930");

                    b.HasIndex("LearnerId");

                    b.HasIndex("QuestId");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("WebApplication1.Models.SkillMasteryQuest", b =>
                {
                    b.Property<int>("QuestId")
                        .HasColumnType("int")
                        .HasColumnName("Quest_ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("SkillsToBeMastered")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Skills_To_Be_Mastered");

                    b.HasKey("QuestId")
                        .HasName("PK__SkillMas__6D9E739BF5EEE563");

                    b.ToTable("SkillMasteryQuest", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.SkillProgression", b =>
                {
                    b.Property<int>("SkillProgressionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Skill_Progression_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillProgressionId"));

                    b.Property<int?>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<int?>("ProficiencyLevel")
                        .HasColumnType("int")
                        .HasColumnName("Proficiency_Level");

                    b.HasKey("SkillProgressionId")
                        .HasName("PK__SkillPro__50CEF27729A56E3F");

                    b.HasIndex("LearnerId");

                    b.ToTable("SkillProgression", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.SkillProgressionChallengingTask", b =>
                {
                    b.Property<string>("ChallengingTask")
                        .HasColumnType("text")
                        .HasColumnName("Challenging_Task");

                    b.Property<int?>("SkillProgressionId")
                        .HasColumnType("int")
                        .HasColumnName("Skill_Progression_ID");

                    b.HasIndex("SkillProgressionId");

                    b.ToTable("SkillProgressionChallengingTasks");
                });

            modelBuilder.Entity("WebApplication1.Models.Survey", b =>
                {
                    b.Property<int>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Survey_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyId"));

                    b.Property<int?>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("SurveyId")
                        .HasName("PK__Surveys__6C04F7B49B00D26D");

                    b.HasIndex("LearnerId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("WebApplication1.Models.SurveysQuestion", b =>
                {
                    b.Property<int>("SurveyId")
                        .HasColumnType("int")
                        .HasColumnName("Survey_ID");

                    b.Property<string>("Question")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SurveyId", "Question")
                        .HasName("PK__SurveysQ__EAB770122A788E1D");

                    b.ToTable("SurveysQuestions");
                });

            modelBuilder.Entity("WebApplication1.Models.UserAcccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryOfOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ExperienceLevel")
                        .HasColumnType("int");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNumber2")
                        .HasColumnType("int");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AchievementBadge", b =>
                {
                    b.HasOne("WebApplication1.Models.Achievement", null)
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .IsRequired()
                        .HasConstraintName("FK__Achieveme__Achie__51300E55");

                    b.HasOne("WebApplication1.Models.Badge", null)
                        .WithMany()
                        .HasForeignKey("BadgeId")
                        .IsRequired()
                        .HasConstraintName("FK__Achieveme__Badge__5224328E");
                });

            modelBuilder.Entity("CoursesInstructor", b =>
                {
                    b.HasOne("WebApplication1.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__CoursesIn__Cours__46B27FE2");

                    b.HasOne("WebApplication1.Models.Instructor", null)
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .IsRequired()
                        .HasConstraintName("FK__CoursesIn__Instr__47A6A41B");
                });

            modelBuilder.Entity("LearnerAchievement", b =>
                {
                    b.HasOne("WebApplication1.Models.Achievement", null)
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .IsRequired()
                        .HasConstraintName("FK__LearnerAc__Achie__339FAB6E");

                    b.HasOne("WebApplication1.Models.Learner", null)
                        .WithMany()
                        .HasForeignKey("LearnerId")
                        .IsRequired()
                        .HasConstraintName("FK__LearnerAc__Learn__32AB8735");
                });

            modelBuilder.Entity("LearnerBadge", b =>
                {
                    b.HasOne("WebApplication1.Models.Badge", null)
                        .WithMany()
                        .HasForeignKey("BadgeId")
                        .IsRequired()
                        .HasConstraintName("FK__LearnerBa__Badge__09A971A2");

                    b.HasOne("WebApplication1.Models.Learner", null)
                        .WithMany()
                        .HasForeignKey("LearnerId")
                        .IsRequired()
                        .HasConstraintName("FK__LearnerBa__Learn__0A9D95DB");
                });

            modelBuilder.Entity("LearnerCourse", b =>
                {
                    b.HasOne("WebApplication1.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__LearnerCo__Cours__55009F39");

                    b.HasOne("WebApplication1.Models.Learner", null)
                        .WithMany()
                        .HasForeignKey("LearnerId")
                        .IsRequired()
                        .HasConstraintName("FK__LearnerCo__Learn__55F4C372");
                });

            modelBuilder.Entity("LearnerSurvey", b =>
                {
                    b.HasOne("WebApplication1.Models.Learner", null)
                        .WithMany()
                        .HasForeignKey("LearnerId")
                        .IsRequired()
                        .HasConstraintName("FK__LearnerSu__Learn__37703C52");

                    b.HasOne("WebApplication1.Models.Survey", null)
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .IsRequired()
                        .HasConstraintName("FK__LearnerSu__Surve__3864608B");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApplication1.Models.UserAcccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApplication1.Models.UserAcccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.UserAcccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApplication1.Models.UserAcccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModulesLearningActivity", b =>
                {
                    b.HasOne("WebApplication1.Models.LearningActivity", null)
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .IsRequired()
                        .HasConstraintName("FK__ModulesLe__Activ__4B7734FF");

                    b.HasOne("WebApplication1.Models.Module", null)
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .IsRequired()
                        .HasConstraintName("FK__ModulesLe__Modul__4A8310C6");
                });

            modelBuilder.Entity("PersonalizationProfilesLearningPath", b =>
                {
                    b.HasOne("WebApplication1.Models.LearningPath", null)
                        .WithMany()
                        .HasForeignKey("PathId")
                        .IsRequired()
                        .HasConstraintName("FK__Personali__PathI__42E1EEFE");

                    b.HasOne("WebApplication1.Models.PersonalizationProfile", null)
                        .WithMany()
                        .HasForeignKey("PersonalizationProfileId")
                        .IsRequired()
                        .HasConstraintName("FK__Personali__Perso__43D61337");
                });

            modelBuilder.Entity("WebApplication1.Models.Assessment", b =>
                {
                    b.HasOne("WebApplication1.Models.Course", "Course")
                        .WithMany("Assessments")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Assessmen__Cours__2645B050");

                    b.HasOne("WebApplication1.Models.Instructor", "Instructor")
                        .WithMany("Assessments")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("FK__Assessmen__Instr__2739D489");

                    b.HasOne("WebApplication1.Models.Module", "Module")
                        .WithMany("Assessments")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK__Assessmen__Modul__282DF8C2");

                    b.Navigation("Course");

                    b.Navigation("Instructor");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("WebApplication1.Models.CollaborativeQuest", b =>
                {
                    b.HasOne("WebApplication1.Models.Quest", "Quest")
                        .WithOne("CollaborativeQuest")
                        .HasForeignKey("WebApplication1.Models.CollaborativeQuest", "QuestId")
                        .IsRequired()
                        .HasConstraintName("FK__Collabora__Quest__123EB7A3");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("WebApplication1.Models.ContentLibrary", b =>
                {
                    b.HasOne("WebApplication1.Models.Module", "Module")
                        .WithMany("ContentLibraries")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK__ContentLi__Modul__778AC167");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("WebApplication1.Models.CourseEnrollment", b =>
                {
                    b.HasOne("WebApplication1.Models.Course", "Course")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__CourseEnr__Cours__70DDC3D8");

                    b.HasOne("WebApplication1.Models.Learner", "Learner")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("LearnerId")
                        .IsRequired()
                        .HasConstraintName("FK__CourseEnr__Learn__6FE99F9F");

                    b.Navigation("Course");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("WebApplication1.Models.CourseLearningObjective", b =>
                {
                    b.HasOne("WebApplication1.Models.Course", "Course")
                        .WithMany("CourseLearningObjectives")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__CourseLea__Cours__5812160E");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("WebApplication1.Models.CoursePrerequisite", b =>
                {
                    b.HasOne("WebApplication1.Models.Course", "Course")
                        .WithOne("CoursePrerequisite")
                        .HasForeignKey("WebApplication1.Models.CoursePrerequisite", "CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__CoursePre__Cours__5535A963");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("WebApplication1.Models.DiscussionForum", b =>
                {
                    b.HasOne("WebApplication1.Models.Module", "Module")
                        .WithMany("DiscussionForums")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK__Discussio__Modul__7E37BEF6");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("WebApplication1.Models.DiscussionForumsLearner", b =>
                {
                    b.HasOne("WebApplication1.Models.DiscussionForum", "Forum")
                        .WithMany()
                        .HasForeignKey("ForumId")
                        .HasConstraintName("FK__Discussio__Forum__4D5F7D71");

                    b.HasOne("WebApplication1.Models.Learner", "Learner")
                        .WithMany()
                        .HasForeignKey("LearnerId")
                        .HasConstraintName("FK__Discussio__Learn__4E53A1AA");

                    b.Navigation("Forum");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("WebApplication1.Models.EmotionalFeedback", b =>
                {
                    b.HasOne("WebApplication1.Models.LearningActivity", "Activity")
                        .WithMany("EmotionalFeedbacks")
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("FK__Emotional__Activ__5CA1C101");

                    b.HasOne("WebApplication1.Models.Instructor", "Instructor")
                        .WithMany("EmotionalFeedbacks")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("FK__Emotional__Instr__5D95E53A");

                    b.HasOne("WebApplication1.Models.Learner", "Learner")
                        .WithMany("EmotionalFeedbacks")
                        .HasForeignKey("LearnerId")
                        .HasConstraintName("FK__Emotional__Learn__5BAD9CC8");

                    b.Navigation("Activity");

                    b.Navigation("Instructor");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("WebApplication1.Models.InstructorEmail", b =>
                {
                    b.HasOne("WebApplication1.Models.Instructor", "Instructor")
                        .WithMany("InstructorEmails")
                        .HasForeignKey("InstructorId")
                        .IsRequired()
                        .HasConstraintName("FK__Instructo__Instr__2BFE89A6");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("WebApplication1.Models.InteractionLog", b =>
                {
                    b.HasOne("WebApplication1.Models.Learner", "Learner")
                        .WithMany("InteractionLogs")
                        .HasForeignKey("LearnerId")
                        .HasConstraintName("FK__Interacti__Learn__628FA481");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("WebApplication1.Models.Leaderboard", b =>
                {
                    b.HasOne("WebApplication1.Models.Course", "Course")
                        .WithMany("Leaderboards")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__Leaderboa__Cours__49C3F6B7");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("WebApplication1.Models.Learner", b =>
                {
                    b.HasOne("WebApplication1.Models.Course", "Course")
                        .WithMany("Learners")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Learner__Course___4CA06362");

                    b.HasOne("WebApplication1.Models.UserAcccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Leaderboard", "Leaderboard")
                        .WithMany("Learners")
                        .HasForeignKey("CourseId", "BoardId")
                        .HasConstraintName("FK__Learner__4D94879B");

                    b.Navigation("Course");

                    b.Navigation("Leaderboard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.LearnerAssessment", b =>
                {
                    b.HasOne("WebApplication1.Models.Assessment", "Assessment")
                        .WithMany("LearnerAssessments")
                        .HasForeignKey("AssessmentId")
                        .IsRequired()
                        .HasConstraintName("FK__LearnerAs__Asses__2FCF1A8A");

                    b.HasOne("WebApplication1.Models.Learner", "Learner")
                        .WithMany("LearnerAssessments")
                        .HasForeignKey("LearnerId")
                        .IsRequired()
                        .HasConstraintName("FK__LearnerAs__Learn__2EDAF651");

                    b.Navigation("Assessment");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("WebApplication1.Models.LearnerDiscussionForum", b =>
                {
                    b.HasOne("WebApplication1.Models.DiscussionForum", "Forum")
                        .WithMany("LearnerDiscussionForums")
                        .HasForeignKey("ForumId")
                        .IsRequired()
                        .HasConstraintName("FK__LearnerDi__Forum__22751F6C");

                    b.HasOne("WebApplication1.Models.Learner", "Learner")
                        .WithMany("LearnerDiscussionForums")
                        .HasForeignKey("LearnerId")
                        .IsRequired()
                        .HasConstraintName("FK__LearnerDi__Learn__236943A5");

                    b.Navigation("Forum");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("WebApplication1.Models.LearnerNotification", b =>
                {
                    b.HasOne("WebApplication1.Models.Learner", "Learner")
                        .WithMany("LearnerNotifications")
                        .HasForeignKey("LearnerId")
                        .IsRequired()
                        .HasConstraintName("FK__LearnerNo__Learn__3B40CD36");

                    b.HasOne("WebApplication1.Models.Notification", "Notification")
                        .WithMany("LearnerNotifications")
                        .HasForeignKey("NotificationId")
                        .IsRequired()
                        .HasConstraintName("FK__LearnerNo__Notif__3C34F16F");

                    b.Navigation("Learner");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("WebApplication1.Models.LearnerQuest", b =>
                {
                    b.HasOne("WebApplication1.Models.Learner", "Learner")
                        .WithMany("LearnerQuests")
                        .HasForeignKey("LearnerId")
                        .IsRequired()
                        .HasConstraintName("FK__LearnerQu__Learn__1F98B2C1");

                    b.HasOne("WebApplication1.Models.Quest", "Quest")
                        .WithMany("LearnerQuests")
                        .HasForeignKey("QuestId")
                        .IsRequired()
                        .HasConstraintName("FK__LearnerQu__Quest__1EA48E88");

                    b.Navigation("Learner");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("WebApplication1.Models.LearnerSkill", b =>
                {
                    b.HasOne("WebApplication1.Models.Learner", "Learner")
                        .WithMany()
                        .HasForeignKey("LearnerId")
                        .HasConstraintName("FK__LearnerSk__Learn__52593CB8");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("WebApplication1.Models.LearningActivity", b =>
                {
                    b.HasOne("WebApplication1.Models.Course", "Course")
                        .WithMany("LearningActivities")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__LearningA__Cours__6C190EBB");

                    b.HasOne("WebApplication1.Models.InteractionLog", "Log")
                        .WithMany("LearningActivities")
                        .HasForeignKey("LogId")
                        .HasConstraintName("FK__LearningA__Log_I__6D0D32F4");

                    b.HasOne("WebApplication1.Models.Module", "Module")
                        .WithMany("LearningActivities")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK__LearningA__Modul__6B24EA82");

                    b.Navigation("Course");

                    b.Navigation("Log");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("WebApplication1.Models.LearningGoal", b =>
                {
                    b.HasOne("WebApplication1.Models.Learner", "Learner")
                        .WithMany("LearningGoals")
                        .HasForeignKey("LearnerId")
                        .HasConstraintName("FK__LearningG__Learn__01142BA1");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("WebApplication1.Models.LearningPath", b =>
                {
                    b.HasOne("WebApplication1.Models.Instructor", "Instructor")
                        .WithMany("LearningPaths")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("FK__LearningP__Instr__3F115E1A");

                    b.HasOne("WebApplication1.Models.Learner", "Learner")
                        .WithMany("LearningPaths")
                        .HasForeignKey("LearnerId")
                        .HasConstraintName("FK__LearningP__Learn__40058253");

                    b.Navigation("Instructor");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("WebApplication1.Models.Module", b =>
                {
                    b.HasOne("WebApplication1.Models.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Modules__Course___5BE2A6F2");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("WebApplication1.Models.ModulesLink", b =>
                {
                    b.HasOne("WebApplication1.Models.Module", "Module")
                        .WithMany("ModulesLinks")
                        .HasForeignKey("ModuleId")
                        .IsRequired()
                        .HasConstraintName("FK__ModulesLi__Modul__656C112C");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("WebApplication1.Models.ModulesTargetTrait", b =>
                {
                    b.HasOne("WebApplication1.Models.Module", "Module")
                        .WithMany("ModulesTargetTraits")
                        .HasForeignKey("ModuleId")
                        .IsRequired()
                        .HasConstraintName("FK__ModulesTa__Modul__68487DD7");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("WebApplication1.Models.Notification", b =>
                {
                    b.HasOne("WebApplication1.Models.Learner", "Learner")
                        .WithMany("Notifications")
                        .HasForeignKey("LearnerId")
                        .HasConstraintName("FK__Notificat__Learn__7A672E12");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("WebApplication1.Models.PersonalizationProfile", b =>
                {
                    b.HasOne("WebApplication1.Models.Learner", "Learner")
                        .WithMany("PersonalizationProfiles")
                        .HasForeignKey("LearnerId")
                        .HasConstraintName("FK__Personali__Learn__5070F446");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("WebApplication1.Models.Reward", b =>
                {
                    b.HasOne("WebApplication1.Models.Learner", "Learner")
                        .WithMany("Rewards")
                        .HasForeignKey("LearnerId")
                        .HasConstraintName("FK__Rewards__Learner__151B244E");

                    b.HasOne("WebApplication1.Models.Quest", "Quest")
                        .WithMany("Rewards")
                        .HasForeignKey("QuestId")
                        .HasConstraintName("FK__Rewards__Quest_I__160F4887");

                    b.Navigation("Learner");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("WebApplication1.Models.SkillMasteryQuest", b =>
                {
                    b.HasOne("WebApplication1.Models.Quest", "Quest")
                        .WithOne("SkillMasteryQuest")
                        .HasForeignKey("WebApplication1.Models.SkillMasteryQuest", "QuestId")
                        .IsRequired()
                        .HasConstraintName("FK__SkillMast__Quest__0F624AF8");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("WebApplication1.Models.SkillProgression", b =>
                {
                    b.HasOne("WebApplication1.Models.Learner", "Learner")
                        .WithMany("SkillProgressions")
                        .HasForeignKey("LearnerId")
                        .HasConstraintName("FK__SkillProg__Learn__18EBB532");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("WebApplication1.Models.SkillProgressionChallengingTask", b =>
                {
                    b.HasOne("WebApplication1.Models.SkillProgression", "SkillProgression")
                        .WithMany()
                        .HasForeignKey("SkillProgressionId")
                        .HasConstraintName("FK__SkillProg__Skill__1AD3FDA4");

                    b.Navigation("SkillProgression");
                });

            modelBuilder.Entity("WebApplication1.Models.Survey", b =>
                {
                    b.HasOne("WebApplication1.Models.Learner", "Learner")
                        .WithMany("SurveysNavigation")
                        .HasForeignKey("LearnerId")
                        .HasConstraintName("FK__Surveys__Learner__03F0984C");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("WebApplication1.Models.SurveysQuestion", b =>
                {
                    b.HasOne("WebApplication1.Models.Survey", "Survey")
                        .WithMany("SurveysQuestions")
                        .HasForeignKey("SurveyId")
                        .IsRequired()
                        .HasConstraintName("FK__SurveysQu__Surve__06CD04F7");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("WebApplication1.Models.Assessment", b =>
                {
                    b.Navigation("LearnerAssessments");
                });

            modelBuilder.Entity("WebApplication1.Models.Course", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("CourseEnrollments");

                    b.Navigation("CourseLearningObjectives");

                    b.Navigation("CoursePrerequisite");

                    b.Navigation("Leaderboards");

                    b.Navigation("Learners");

                    b.Navigation("LearningActivities");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("WebApplication1.Models.DiscussionForum", b =>
                {
                    b.Navigation("LearnerDiscussionForums");
                });

            modelBuilder.Entity("WebApplication1.Models.Instructor", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("EmotionalFeedbacks");

                    b.Navigation("InstructorEmails");

                    b.Navigation("LearningPaths");
                });

            modelBuilder.Entity("WebApplication1.Models.InteractionLog", b =>
                {
                    b.Navigation("LearningActivities");
                });

            modelBuilder.Entity("WebApplication1.Models.Leaderboard", b =>
                {
                    b.Navigation("Learners");
                });

            modelBuilder.Entity("WebApplication1.Models.Learner", b =>
                {
                    b.Navigation("CourseEnrollments");

                    b.Navigation("EmotionalFeedbacks");

                    b.Navigation("InteractionLogs");

                    b.Navigation("LearnerAssessments");

                    b.Navigation("LearnerDiscussionForums");

                    b.Navigation("LearnerNotifications");

                    b.Navigation("LearnerQuests");

                    b.Navigation("LearningGoals");

                    b.Navigation("LearningPaths");

                    b.Navigation("Notifications");

                    b.Navigation("PersonalizationProfiles");

                    b.Navigation("Rewards");

                    b.Navigation("SkillProgressions");

                    b.Navigation("SurveysNavigation");
                });

            modelBuilder.Entity("WebApplication1.Models.LearningActivity", b =>
                {
                    b.Navigation("EmotionalFeedbacks");
                });

            modelBuilder.Entity("WebApplication1.Models.Module", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("ContentLibraries");

                    b.Navigation("DiscussionForums");

                    b.Navigation("LearningActivities");

                    b.Navigation("ModulesLinks");

                    b.Navigation("ModulesTargetTraits");
                });

            modelBuilder.Entity("WebApplication1.Models.Notification", b =>
                {
                    b.Navigation("LearnerNotifications");
                });

            modelBuilder.Entity("WebApplication1.Models.Quest", b =>
                {
                    b.Navigation("CollaborativeQuest");

                    b.Navigation("LearnerQuests");

                    b.Navigation("Rewards");

                    b.Navigation("SkillMasteryQuest");
                });

            modelBuilder.Entity("WebApplication1.Models.Survey", b =>
                {
                    b.Navigation("SurveysQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
*/